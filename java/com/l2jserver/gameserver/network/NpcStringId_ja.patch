### Eclipse Workspace Patch 1.0
#P L2J_Server_BETA
Index: java/com/l2jserver/gameserver/network/NpcStringId.java
===================================================================
--- java/com/l2jserver/gameserver/network/NpcStringId.java	(revision 6668)
+++ java/com/l2jserver/gameserver/network/NpcStringId.java	(working copy)
@@ -18,26 +18,17 @@
  */
 package com.l2jserver.gameserver.network;
 
-import java.io.File;
+import static com.l2jserver.gameserver.debug.*;
+
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.xml.parsers.DocumentBuilderFactory;
+import com.l2jserver.gameserver.network.serverpackets.ExShowScreenMessage;
 
-import org.w3c.dom.Document;
-import org.w3c.dom.NamedNodeMap;
-import org.w3c.dom.Node;
+import gnu.trove.map.hash.TIntObjectHashMap;
 
-import com.l2jserver.Config;
-import com.l2jserver.gameserver.model.clientstrings.Builder;
-import com.l2jserver.gameserver.network.serverpackets.ExShowScreenMessage;
-
 /**
  * NpcStringId implementation, based on SystemMessageId class
  * @author mrTJO
@@ -45,8 +36,6 @@
 public final class NpcStringId
 {
 	private static final Logger _log = Logger.getLogger(NpcStringId.class.getName());
-	private static final NSLocalisation[] EMPTY_NSL_ARRAY = new NSLocalisation[0];
-	public static final NpcStringId[] EMPTY_ARRAY = new NpcStringId[0];
 	
 	/**
 	 * ID: 1<br>
@@ -21609,7 +21598,7 @@
 	/**
 	 * Map containing all NpcStringId<br>
 	 */
-	private static Map<Integer, NpcStringId> VALUES = new HashMap<>();
+	private static TIntObjectHashMap<NpcStringId> VALUES = new TIntObjectHashMap<>();
 	
 	static
 	{
@@ -25214,19 +25203,15 @@
 	{
 		final Field[] fields = NpcStringId.class.getDeclaredFields();
 		
-		int mod;
-		NpcStringId nsId;
 		for (final Field field : fields)
 		{
-			mod = field.getModifiers();
+			int mod = field.getModifiers();
 			if (Modifier.isStatic(mod) && Modifier.isPublic(mod) && Modifier.isFinal(mod) && field.getType().equals(NpcStringId.class))
 			{
 				try
 				{
-					nsId = (NpcStringId) field.get(null);
-					nsId.setName(field.getName());
+					NpcStringId nsId = (NpcStringId) field.get(null);
 					nsId.setParamCount(parseMessageParameters(field.getName()));
-					
 					VALUES.put(nsId.getId(), nsId);
 				}
 				catch (final Exception e)
@@ -25280,113 +25265,13 @@
 		}
 	}
 	
-	public static final void reloadLocalisations()
-	{
-		for (final NpcStringId nsId : VALUES.values())
-		{
-			if (nsId != null)
-			{
-				nsId.removeAllLocalisations();
-			}
-		}
-		
-		if (!Config.L2JMOD_MULTILANG_NS_ENABLE)
-		{
-			_log.log(Level.INFO, "NpcStringId: MultiLanguage disabled.");
-			return;
-		}
-		
-		final List<String> languages = Config.L2JMOD_MULTILANG_NS_ALLOWED;
-		final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-		factory.setValidating(false);
-		factory.setIgnoringComments(true);
-		
-		File file;
-		Node node;
-		Document doc;
-		NamedNodeMap nnmb;
-		NpcStringId nsId;
-		String text;
-		for (final String lang : languages)
-		{
-			file = new File(Config.DATAPACK_ROOT, "/data/lang/" + lang + "/ns/NpcStringLocalisation.xml");
-			if (!file.isFile())
-			{
-				continue;
-			}
-			
-			_log.log(Level.INFO, "NpcStringId: Loading localisation for '" + lang + "'");
-			
-			try
-			{
-				doc = factory.newDocumentBuilder().parse(file);
-				for (Node na = doc.getFirstChild(); na != null; na = na.getNextSibling())
-				{
-					if ("list".equals(na.getNodeName()))
-					{
-						for (Node nb = na.getFirstChild(); nb != null; nb = nb.getNextSibling())
-						{
-							if ("ns".equals(nb.getNodeName()))
-							{
-								nnmb = nb.getAttributes();
-								node = nnmb.getNamedItem("id");
-								if (node != null)
-								{
-									nsId = getNpcStringId(Integer.parseInt(node.getNodeValue()));
-									if (nsId == null)
-									{
-										_log.log(Level.WARNING, "NpcStringId: Unknown NSID '" + node.getNodeValue() + "', lang '" + lang + "'.");
-										continue;
-									}
-								}
-								else
-								{
-									node = nnmb.getNamedItem("name");
-									nsId = getNpcStringId(node.getNodeValue());
-									if (nsId == null)
-									{
-										_log.log(Level.WARNING, "NpcStringId: Unknown NSID '" + node.getNodeValue() + "', lang '" + lang + "'.");
-										continue;
-									}
-								}
-								
-								node = nnmb.getNamedItem("text");
-								if (node == null)
-								{
-									_log.log(Level.WARNING, "NpcStringId: No text defined for NSID '" + nsId + "', lang '" + lang + "'.");
-									continue;
-								}
-								
-								text = node.getNodeValue();
-								if (text.isEmpty() || (text.length() > 255))
-								{
-									_log.log(Level.WARNING, "NpcStringId: Invalid text defined for NSID '" + nsId + "' (to long or empty), lang '" + lang + "'.");
-									continue;
-								}
-								
-								nsId.attachLocalizedText(lang, text);
-							}
-						}
-					}
-				}
-			}
-			catch (final Exception e)
-			{
-				_log.log(Level.SEVERE, "NpcStringId: Failed loading '" + file + "'", e);
-			}
-		}
-	}
-	
 	private final int _id;
-	private String _name;
 	private byte _params;
-	private NSLocalisation[] _localisations;
 	private ExShowScreenMessage _staticScreenMessage;
 	
 	private NpcStringId(final int id)
 	{
 		_id = id;
-		_localisations = EMPTY_NSL_ARRAY;
 	}
 	
 	public final int getId()
@@ -25394,16 +25279,25 @@
 		return _id;
 	}
 	
-	private final void setName(final String name)
+	private final String getName()
 	{
-		_name = name;
+		TRACE("[TRACE]__BASENAME__:__LINE__", "[pass]");/*@IF DEBUG@*/
+		for (Field field : NpcStringId.class.getDeclaredFields())
+		{
+			try
+			{
+				if (field.get(null) == this)
+					return field.getName();
+			}
+			catch (IllegalArgumentException | IllegalAccessException e)
+			{
+				System.err.println("NpcStringId[" + getId() + "]#getName(): " + e.getMessage());
+				e.printStackTrace();
+			}
+		}
+		return null;
 	}
 	
-	public final String getName()
-	{
-		return _name;
-	}
-	
 	public final int getParamCount()
 	{
 		return _params;
@@ -25435,31 +25329,9 @@
 	
 	public final NSLocalisation getLocalisation(final String lang)
 	{
-		NSLocalisation nsl;
-		for (int i = _localisations.length; i-- > 0;)
-		{
-			nsl = _localisations[i];
-			if (nsl.getLanguage().hashCode() == lang.hashCode())
-			{
-				return nsl;
-			}
-		}
 		return null;
 	}
 	
-	public final void attachLocalizedText(final String lang, final String text)
-	{
-		final int length = _localisations.length;
-		final NSLocalisation[] localisations = Arrays.copyOf(_localisations, length + 1);
-		localisations[length] = new NSLocalisation(lang, text);
-		_localisations = localisations;
-	}
-	
-	public final void removeAllLocalisations()
-	{
-		_localisations = EMPTY_NSL_ARRAY;
-	}
-	
 	public final ExShowScreenMessage getStaticScreenMessage()
 	{
 		return _staticScreenMessage;
@@ -25478,23 +25350,9 @@
 	
 	public static final class NSLocalisation
 	{
-		private final String _lang;
-		private final Builder _builder;
-		
-		public NSLocalisation(final String lang, final String text)
-		{
-			_lang = lang;
-			_builder = Builder.newBuilder(text);
-		}
-		
-		public final String getLanguage()
-		{
-			return _lang;
-		}
-		
 		public final String getLocalisation(final Object... params)
 		{
-			return _builder.toString(params);
+			return null;
 		}
 	}
 }
\ No newline at end of file
